#!/usr/bin/python
# -*- coding: UTF-8 -*-
# Example for output from agent
# ---------------------------------------------------------
# iwlwifi-virtual-0
# temp1 +29.0°C
# pch_skylake-virtual-0
# temp1 +39.5°C
# acpitz-virtual-0
# temp1 +41.0°C  crit  +98.0°C
# thinkpad-isa-0000
# fan1 0 RPM
# coretemp-isa-0000
# Package_id_0 +41.0°C  high  +100.0°C crit  +100.0°C
# Core_0 +41.0°C  high  +100.0°C crit  +100.0°C
# Core_1 +41.0°C  high  +100.0°C crit  +100.0°C
# Core_2 +41.0°C  high  +100.0°C crit  +100.0°C
# Core_3 +41.0°C  high  +100.0°C crit  +100.0°C
# ---------------------------------------------------------
def to_chip_sensor_name(chipname, sensorname):
	return chipname + ' ' + sensorname

def my_save_float(value):
	try:
		return float(value)
	except Exception as e:
		return 0

def get_index_of(src, value):
	i = 0
	for v in src:
		if v == value:
			return i
		i += 1
	return -1

def parse_min_max(minKeyWord, maxKeyWord, sensor_unit, info):
	pre_parsed = parse_lmsensors(info, sensor_unit)

	inventory = []

	for sensor_chipname, line in pre_parsed:
		min_value = None
		max_value = None
		
		min_index = get_index_of(line, minKeyWord)
		max_index = get_index_of(line, maxKeyWord)
		
		if min_index != -1 and len(line) >= (min_index + 1):
			min_value = my_save_float(line[min_index + 1])
		if max_index != -1 and len(line) >= (max_index + 1):
			max_value = my_save_float(line[max_index + 1])
		
		inventory.append((sensor_chipname, (min_value, max_value)))
		
	return inventory


def inventory_lmsensors_temp(info):
	return parse_min_max('high', 'crit', 'C', info)

def inventory_lmsensors_fan(info):
	return parse_min_max('min', 'max', 'RPM', info)

def inventory_lmsensors_volt(info):
	return parse_min_max('min', 'max', 'V', info)

# this method colleact all sensors with there value line and returns a tuple
# with the chip_sensor name and the value with values from the agent starting
# with the sensors name
def parse_lmsensors(info, sensors_with_unit):
	# [['lm85i2c02e'], ['in0', '+1.56', 'V', 'min', '+0.00', 'V', 'max', '+3.32', 'V'], ['Vcore', '+1.35', 'V', 'min', '+0.00', 'V', 'max', '+2.99', 'V'], ['+3.3V', '+3.33', 'V', 'min', '+0.00', 'V', 'max', '+4.38', 'V'], ['+5V', '+5.10', 'V', 'min', '+0.00', 'V', 'max', '+6.64', 'V'], ['+12V', '+12.00', 'V', 'min', '+0.00', 'V', 'max', '+15.94', 'V'], ['fan1', '1376', 'RPM', 'min', '0', 'RPM'], ['fan2', '0', 'RPM', 'min', '0', 'RPM'], ['fan3', '970', 'RPM', 'min', '0', 'RPM'], ['fan4', '1276', 'RPM', 'min', '0', 'RPM'], ['temp1', '+59.0', 'C', 'low', '128.0', 'C', 'high', '+127.0', 'C'], ['MB', 'Temp', '+50.0', 'C', 'low', '127.0', 'C', 'high', '+127.0', 'C'], ['temp3', '+43.0', 'C', 'low', '127.0', 'C', 'high', '+127.0', 'C'], ['cpu0vid', '+1.088', 'V']]
	pre_parsed = []
	chipname = ''
	for line in info:
		if len(line) == 1:
			chipname = line[0] # 'lm85i2c02e'
			continue

                if len(line) < 3:
                    continue
					
		sensor_name = line[0] # 'in0', 'fan1', etc
		# scur  = line[1] # current value, '+1.56'
		sensor_unit = line[2] # 'V', 'RPM', 'C'

		chip_sensors_name = to_chip_sensor_name(chipname, sensor_name)

		if sensor_unit == sensors_with_unit:
			pre_parsed.append((chip_sensors_name, line))

	return pre_parsed

def check_min_max(item, params, info):
	smin, smax = params
	values = None
	chipname = ''

	for line in info:
		if len(line) == 1:
			chipname = line[0]
		elif len(line) > 1 and to_chip_sensor_name(chipname, line[0]) == item:
			values = line
			break
	if values == None:
		return (3, "UNKNOWN - sensor status not found in agent output")
	value = float(values[1])
	stype = values[2]
	perfdata = [ ( item, value, "", my_save_float(smax) ) ]
	if smax != None and value > float(smax):
		return (2, "CRITICAL - Sensor value %s %s, which is bigger than %s" % (value, stype, smax), perfdata)
	elif smin != None and value < float(smin):
		return (2, "CRITICAL - Sensor value %s %s, which is smaller than %s" % (value, stype, smin), perfdata)
	else:
		return (0, "OK - Sensor value is %s %s" % (value, stype), perfdata)

def check_high_crit(item, params, info):
	high, crit = params
	values = None
	chipname = ''

	for line in info:
		if len(line) == 1:
			chipname = line[0]
		elif len(line) > 1 and to_chip_sensor_name(chipname, line[0]) == item:
			values = line
			break
	if values == None:
		return (3, "UNKNOWN - sensor status not found in agent output")
	value = float(values[1])
	stype = values[2]
	perfdata = [ ( item, value, "", my_save_float(high) ) ]

	if crit != None and value > float(crit):
		return (2, "CRITICAL - Sensor value %s %s, which is bigger than %s" % (value, stype, crit), perfdata)
	elif high != None and value > float(high):
		return (1, "WARN - Sensor value %s %s, which is bigger than %s" % (value, stype, high), perfdata)
	else:
		return (0, "OK - Sensor value is %s %s" % (value, stype), perfdata)


check_info['lmsensors.fan'] = (check_min_max, "Sensor %s", 1, inventory_lmsensors_fan)
check_info['lmsensors.temp'] = (check_high_crit, "Sensor %s", 1, inventory_lmsensors_temp)
check_info['lmsensors.volt'] = (check_min_max, "Sensor %s", 1, inventory_lmsensors_volt)


